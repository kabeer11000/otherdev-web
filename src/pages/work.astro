---
import Layout from "@/layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import SEO from "@/components/SEO.astro";

import { getRelativeLocaleUrl } from "astro:i18n";
import { sanitize } from "./work/[id].astro";


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const importProjectsModule = import.meta.glob("@/data/*/projects.json")[
  `/src/data/${lang}/projects.json`
];
let Projects = [];
if (importProjectsModule) Projects = (await importProjectsModule()).default;
else
  console.warn(
    `Could not find projects module importer for key: ${`/src/data/${lang}/projects.json`}`
  );
---

<slot name="head">
  <SEO pageName="work" />
</slot>
<Layout>
  <div
    class="pt-[10rem] w-full overflow-hidden flex flex-col lg:mx-auto lg:container px-4 lg:px-0">
    <div class="flex-auto w-full overflow-visible-overflow-x-auto">
      <table class="table-auto w-full">
        <tbody>
          {
            Projects.map((item, index) => (
              <div class="group">
                <tr>
                  <td class="select-none text-left py-10">{index + 1}</td>
                  <td class="py-10 px-4">
                    {item.hasPage ?
                      <a href={`${getRelativeLocaleUrl(lang, "work/" + sanitize(item.title))}`}>
                        {item.imageSrc && (
                          <img 
                            src={item.imageSrc}
                            loading="lazy"
                            decoding="async"
                            data-hover-src={item.imageSrc}
                            class="work-hover-image w-[30rem] pointer-events-none absolute max-w-[80vw] h-auto left-1/2 translate-x-1/3 bottom-[2rem] opacity-0 invisible transition-opacity duration-300"
                            alt={item.title}
                          />
                        )}
                        <h1 class="dynamic-underline-left before:bg-white text-white mt-auto queens-compressed text-left align-bottom text-3xl lg:text-5xl z-0">
                          {item.title}
                        </h1>
                        <p class="select-none mt-2">{item.description}</p>
                      </a>
                    : <>
                        {item.imageSrc && (
                          <img
                            src={item.imageSrc}
                            loading="lazy"
                            decoding="async"
                            data-hover-src={item.imageSrc}
                            class="work-hover-image w-[30rem] pointer-events-none absolute max-w-[80vw] h-auto left-1/2 translate-x-1/3 bottom-[2rem] opacity-0 invisible transition-opacity duration-300"
                            alt={item.title}
                          />
                        )}
                        <h1 class="dynamic-underline-left before:bg-white text-white mt-auto queens-compressed text-left align-bottom text-3xl lg:text-5xl z-0">
                          {item.title}
                        </h1>
                        <p class="select-none mt-2">{item.description}</p>
                      </>
                    }
                  </td>
                  <td class="select-none text-right py-10">{item.year}</td>
                </tr>
              </div>
            ))
          }
        </tbody>
      </table>
    </div>
    <div class="py-[4rem] max-w-5xl">
      <p set:html={t('about.second-paragraph')}/>
    </div>
  </div>
</Layout>

<style>
  /* Use visibility instead of display for better performance */
  .work-hover-image {
    will-change: opacity;
    contain: layout style paint;
    transform: translateZ(0); /* Force GPU acceleration */
  }
  
  .group:hover .work-hover-image {
    opacity: 1;
    visibility: visible;
  }

  /* Optimize table rendering */
  table {
    contain: layout;
  }
</style>

<script>
  // Lazy load hover images
  document.addEventListener('DOMContentLoaded', () => {
    const hoverImages = document.querySelectorAll('.work-hover-image');
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          // Preload image when row is in viewport
          const preloadImg = new Image();
          preloadImg.src = img.dataset.hoverSrc;
          imageObserver.unobserve(img);
        }
      });
    }, { rootMargin: '50px' });

    hoverImages.forEach(img => imageObserver.observe(img));
  });
</script>