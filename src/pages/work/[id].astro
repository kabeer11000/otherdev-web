---
import type { GetStaticPaths } from "astro";
import Layout from "@/layouts/Layout.astro";
import { useTranslations, getLangFromUrl } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
// @/utils/sanitize.ts (Example - adjust as needed)
export const sanitize = (str: string): string => {
  return str
    .normalize("NFKD") // Normalize accented characters
    .replace(/[\u0300-\u036f]/g, "") // Remove diacritical marks
    .replace(/&/g, "and") // Replace ampersands
    .replace(/\s+/g, "-") // Replace spaces with dashes
    .replace(/[^\p{L}\p{N}-]+/gu, "") // Remove all but letters, numbers, dashes
    .replace(/--+/g, "-") // Replace multiple dashes with one
    .toLowerCase(); // Lowercase
};

export const getStaticPaths: GetStaticPaths = async () => {
  const lang = "en";
  const paths: { params: { lang: string; slug: string }; props: { project: any } }[] = [];
  const importProjectsModule = import.meta.glob("@/data/*/projects.json");

  const currentLang = lang;
  try {
    const projectData = (await importProjectsModule[`/src/data/${currentLang}/projects.json`]())
      ?.default as any[]; // Explicitly type projectData as an array of any
    if (projectData) {
      const languagePaths = projectData
        .map((project) => {
          if (project.hasPage)
            return {
              params: {
                lang: currentLang,
                slug: sanitize(project.title),
                id: sanitize(project.title),
              },
              props: { project },
            };
          return null;
        })
        .filter((a) => a);
      paths.push(...languagePaths);
    } else {
      console.warn(`Could not find projects data for language: ${currentLang}`);
    }
  } catch (error) {
    console.error(`Error importing projects data for language ${currentLang}:`, error);
  }
  return paths;
};

const { project }: { project: any } = Astro.props;
const absoluteImageUrl =
  project.coverImage ? new URL(project.coverImage, Astro.url).toString() : null;
const { page } = project;
---

<slot name="head">
  <title>{project.title}</title>
  <meta name="description" content={project.description + " " + project.page.excerpt} />
  <meta name="keywords" content={project.keywords} />

  <meta property="og:title" content={`${project.title}`} />
  <meta property="og:description" content={project.description + " " + project.page.excerpt} />
  {absoluteImageUrl && <meta property="og:image" content={absoluteImageUrl} />}
  {absoluteImageUrl && <meta property="og:image:alt" content={project.title} />}

  <meta name="twitter:title" content={`${project.title}`} />
  <meta name="twitter:description" content={project.description + " " + project.page.excerpt} />
  {absoluteImageUrl && <meta name="twitter:image" content={absoluteImageUrl} />}
  {absoluteImageUrl && <meta name="twitter:image:alt" content={project.title} />}
</slot>
<Layout>
  <div class="-bg-gradient-to-b-from-black-to-[var(--background)]">
    <div class="pt-[34vh] lg:mx-auto lg:container relative">
      <div class="relative overflow-hidden lg:px-0 px-4">
        <div data-speed="clamp(0.5)" class="pb-[4rem] grid grid-cols-1 lg:grid-cols-6 gap-x-8">
          <div class="col-span-4">
            <h1
              class="mt-auto max-w-5xl queens-compressed text-[20vw] text-left align-bottom p-0 m-0 h-[6rem] lg:h-[20vh] lg:text-[20vh] z-0">
              {project.company}
            </h1>
            <p class="flex max-w-5xl justify-start py-1 text-left items-baseline mt-4 ">
              {project.title}
            </p>
          </div>
          <div
            class="col-span-2 flex lg:justify-end justify-start text-left lg:text-right items-baseline mt-4 ">
            <!-- <p class="mr-4">{project.location}</p> -->
            <div class="flex gap-4 items-center space-between mt-auto">
              <p>{project.year}</p>
              <div
                class="bg-black text-lg flex items-center py-1 text-nowrap cursor-pointer px-4 rounded-full">
                <p><a href={project.url} target="_blank">{t("work.view-website")}</a></p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="-bg-[var(--background)] shadow relative w-full z-2">
    <div class="lg:container lg:mx-auto px-4 lg:p-0">
      <img
        inferSize
        width={200}
        height={200}
        src={project.coverImage}
        alt={project.coverImageAlt}
        loading="eager"
        decoding="async"
        class="mx-auto w-full object-contain"
      />
      <div class="items-center content-center flex py-[3rem]">
        <p
          class="mr-2"
          style="font-size: var(--text-sm); writing-mode: vertical-rl; text-orientation: mixed;">
          {project.title}
        </p>
        <div class="relative max-w-5xl flex justify-between overflow-hidden items-center">
          <h1 class="mt-auto queens-compressed text-left align-bottom text-3xl lg:text-5xl z-0">
            {project.page.excerpt}
          </h1>
        </div>
      </div>
    </div>
  </div>
  <div class="border-t border-t-neutral-700"></div>
  <div class="-bg-[var(--background)] relative py-[3rem] lg:mx-auto px-4 lg:px-0 lg:container">
    <div class="w-full grid mx-auto text-lg grid-cols-1 lg:grid-cols-2 gap-y-6 gap-x-[4rem]">
      {
        page.splitSections.map((section) => (
          <div key={section.heading}>
            <h4 class="text-sm py-2 font-bold">{section.heading}</h4>
            <p>{section.content}</p>
            <div class="flex no-scrollbar gap-4 text-sm py-4 overflow-x-scroll">
              {section.tags &&
                section.tags.map((tag) => (
                  <div class="bg-neutral-800 text-sm flex items-center py-1 text-nowrap cursor-pointer px-4 rounded-full">
                    <p>{tag}</p>
                  </div>
                ))}
            </div>
          </div>
        ))
      }
    </div>
  </div>
  <div
    class="duration-250 ease-in-out transition upper-image-slideshow-container brightness-75 hover:brightness-50 cursor-pointer">
    <img
      inferSize
      src={page.secondCover}
      loading="lazy"
      decoding="async"
      class="w-full h-auto max-h-screen object-cover shadow-xl upper-slideshow-image"
      alt=""
    />
  </div>
  <div
    class="grid h-full grid-cols-1 lg:grid-cols-2 pt-[0rem] gap-y-10-gap-x-8 gap-1 relative overflow-hidden"
    id="slideshow-container">
    {
      project.page.upperSlideshow.map((image, index) => (
        <img
          inferSize
          key={image}
          src={image}
          loading="lazy"
          decoding="async"
          class="w-full h-auto upper-slideshow-image object-cover will-change-transform"
          data-slide-direction={index % 2 === 0 ? "left" : "right"}
          alt=""
          style={{ opacity: 0, transform: `translateX(${index % 2 === 0 ? "-20%" : "20%"})` }}
        />
      ))
    }
  </div>
  <div class="py-[3rem] lg:mx-auto px-4 lg:px-0 lg:container">
    <div class="-bg-[var(--background) w-full mx-auto py-[6rem]">
      <h1
        class="mt-auto queens-compressed text-left max-w-5xl align-bottom text-3xl lg:text-5xl z-0">
        "{project.page.testimonial.content}"
      </h1>
      {project.page.testimonial.author && <p class="my-4 italic">- {project.page.testimonial.author}</p>}
    </div>
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        // Only initialize if GSAP is available
        if (typeof gsap === 'undefined') return;
        
        // Use a more performant scroll animation
        const images = document.querySelectorAll(".upper-slideshow-image");
        
        images.forEach((img, index) => {
          gsap.to(img, {
            x: 0,
            opacity: 1,
            scrollTrigger: {
              trigger: img,
              start: "top 90%",
              end: "top 20%",
              scrub: 0.5, // Reduced scrub value for better performance
              once: true, // Animation only runs once
              toggleActions: "play none none none"
            },
            ease: "power2.out",
            duration: 0.8
          });
        });
      });
    </script>
  </div>
  <style>
    :root {
      --background: var(--color-neutral-900);
      --text: var(--color-neutral-300);
    }
    
    /* Performance optimizations */
    .upper-slideshow-image {
      contain: layout style paint;
      transform: translateZ(0); /* Force GPU acceleration */
    }
    
    #slideshow-container {
      contain: layout;
    }
  </style>
</Layout>